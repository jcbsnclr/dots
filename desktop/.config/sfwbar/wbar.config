Module("mpd")
Module("pulsectl")
Module("network")

scanner {
# Extract memory usage information
  file("/proc/meminfo") {
    MemTotal = RegEx("^MemTotal:[\t ]*([0-9]+)[\t ]")
    MemAvailable = RegEx("^MemAvailable:[\t ]*([0-9]+)[\t ]")
    MemCache = RegEx( "^Cached:[\t ]*([0-9]+)[\t ]")
    MemBuff = Regex("^Buffers:[\t ]*([0-9]+)[\t ]")
  }

# Add up total and used swap capacity across all partitions
  file("/proc/swaps") {
    SwapTotal = RegEx("[\t ]([0-9]+)",Sum)
    SwapUsed = RegEx("[\t ][0-9]+[\t ]([0-9]+)",Sum)
  }

# Add up CPU utilization stats across all CPUs
  file("/proc/stat") {
    CpuUser = RegEx("^cpu [\t ]*([0-9]+)",Sum)
    CpuNice = RegEx("^cpu [\t ]*[0-9]+ ([0-9]+)",Sum)
    CpuSystem = RegEx("^cpu [\t ]*[0-9]+ [0-9]+ ([0-9]+)",Sum)
    CpuIdle = RegEx("^cpu [\t ]*[0-9]+ [0-9]+ [0-9]+ ([0-9]+)",Sum)
  }

  file("/sys/class/hwmon/hwmon1/temp1_input") {
    CPUTemp = Grab()
  }
  file("/sys/class/power_supply/BAT0/charge_full") {
    BatteryTotal = Grab(Sum)
  }
  file("/sys/class/power_supply/BAT0/charge_now") {
    BatteryLeft = Grab(Sum)
  }
  file("/sys/class/backlight/*/actual_brightness") {
    BacklightActual = Grab(Sum)
  }
  file("/sys/class/backlight/*/max_brightness") {
    BacklightMax = Grab(Sum)
  }
  file("/sys/class/bluetooth/*/rfkill*/state") {
    BluetoothState = Grab(Sum)
  }
  SwayClient("") {
  }
}

define CpuUsage = (CpuUser-CpuUser.pval)/(CpuUser+CpuNice+CpuSystem+CpuIdle-
          CpuUser.pval-CpuNice.pval-CpuSystem.pval-CpuIdle.pval)*100
define Volume = Val(Pulse("sink-volume"))

define WifiQuality = (100 - (-20 - WifiSignal) * 77/65)


# Window Placer
placer {
  xorigin = 5  # place the first window at X% from the left
  yorigin = 5  # place the first window at X% from the top
  xstep = 5    # step by X% of desktop horizontally
  ystep = 5    # step by X% of desktop vertically
  children = true
}

# Task Switcher
switcher {
  interval = 700
  icons = true
  labels = false
  cols = 5
}

menu("winops") {
  item("focus", Focus );
  item("close", Close );
  item("minimize", [!Maximized] Minimize );
  item("unminimize", UnMinimize );
  item("maximize", Maximize );
  item("unmaximize", UnMaximize );
}

triggerAction "pactl", ClientSend "pacmd", "dump-volumes\n";

function("SfwbarInit") {
  Exec "pactl set-sink-volume @DEFAULT_SINK@ +0%"
}

function("ToggleNet") {
  [UserState] UserState "off"
  [UserState] SetValue If(NetInfo("ip")="","Disconnected",
    NetInfo("interface") + ": " + NetInfo("ip") + "/" + NetInfo("cidr"))
  [!UserState] UserState "on"
  [!UserState] SetValue If($WifiInterface="",If($NetDev="","Disconnected",
        $NetDev + ": " + 
        NetInfo("ip") + " "),
        NetInfo("Essid") + " (" + Str(NetStat("signal")) + "%) ")
}

function("ToggleInhibitor") {
  [!IdleInhibit] IdleInhibit "on"
  [!IdleInhibit] SetStyle "idle_inhibitor_activated"
  [!IdleInhibit] SetValue ""
  [!IdleInhibit] SetTooltip "activated"
  [IdleInhibit] IdleInhibit "off"
  [IdleInhibit] SetStyle "idle_inhibitor"
  [IdleInhibit] SetValue ""
  [IdleInhibit] SetTooltip "deactivated"
}

function("ToggleMpd") {
  [!UserState] UserState "on"
  [!UserState] MpdCommand "play"
  [UserState] UserState "off"
  [UserState] MpdCommand "pause"
}

function("SetMpd") {
  SetValue "Mpd", If(Mpd("State")="disconnected","Disconnected",
      Map(Mpd("state"),"pause"," ","play","","") +
      If(!Val(Mpd("random")),'<span color="#f53c3c">','<span>')+" "+'</span>'+
      If(!Val(Mpd("repeat")),""," ")+
      if(Mpd("state")="stop","Stopped",
      Mpd("artist") + " - " + Mpd("album") + " - " + Mpd("title") + " (" +
      Str((Val(Mpd("elapsed"))/1000-Val(Mpd("elapsed"))/1000%60)/60) + ":" +
        Str(Val(Mpd("elapsed"))/1000%60) + "/" +
      Str((Val(Mpd("length"))-Val(Mpd("length"))%60)/60) + ":" +
        Str(Val(Mpd("length"))%60) + ") " + 
      " ⸨" + Str(Val(Mpd("queue_pos"))+1) + "|" + Mpd("queue_len") + "⸩ " +
      Mpd("volume") + "%")) + " "
}

TriggerAction "Mpd", Function "SetMpd"

#function("SfwbarInit") {
#  SetLayer "bottom"
#}

# Panel layout

layout {
  pager {
    style = "pager"
    rows = 1
    preview = true
    numeric = true
  }

  label {
    trigger = "sway"
    value = ActiveWin()
    css = "*{ -GtkWidget-hexpand: true; color: #ffffff; }"
  }

  label "Mpd" {
    interval = 500
    style = if(!Ident(Mpd),"hidden",Map(Mpd("state"),
            "play","mpd_play",
            "pause","mpd_paused",
            "stop","mpd_stopped",
            "mpd_disconnected"))
    action[0] = Function "SetMpd"
    action = MpdCommand "pause"
  }

  label {
    style = "idle_inhibitor"
    value = ""
    tooltip = "deactivated"
    action[1] = Function "ToggleInhibitor"
  }

  label {
    style = If(Ident(NetInfo),"network","hidden")
    trigger = "network"
    action = Function "ToggleNet"
    action[0] = Function "ToggleNet"
  }

  label {
    style = "bluetooth"
    interval = 500
    value = If(BluetoothState = 1," ","")
  }

  label {
    style = "cpu"
    interval = 10000
    value = Str(CpuUsage) + '% '
  }

  label {
    style = "memory"
    interval = 30000
    value = Str((MemTotal-MemAvailable)/MemTotal*100) + '% '
  }

  label {
    style = "temperature"
    interval = 10000
    value = Str(CPUTemp/1000)+'°C '+Lookup(CpuTemp/1000,40,"",20,"","")
  }

  label {
    style = "backlight"
    interval = 2000
    value = Str(BacklightActual/BacklightMax*100) + '% '
  }

  label {
    style = "battery"
    interval = 60000
    value = Str(BatteryLeft/BatteryTotal*100) + '% ' +
          Lookup(BatteryLeft/BatteryTotal,.8,"",.6,"",.4,"",.2,"","")
  }

  label {
    style = If(Ident(Pulse),If(Val(Pulse("sink-mute")),"pulseaudio_muted","pulseaudio"),"hidden")
    trigger = "pulse"
    value = If(Val(Pulse("sink-mute")),"", Str(Volume) + "% " +
        Lookup(Volume,66,"",33,"","")) + " " +
        Str(Val(Pulse("source-volume"))) + "% "
    action[4] = PulseCmd "sink-volume +1"
    action[5] = PulseCmd "sink-volume -1"
  }
    
  label {
    style = "clock"
    value = Time("%H:%M")
  }

  tray {
    rows = 1
  }
}

#CSS
* {
  /* `otf-font-awesome` is required to be installed for icons */
  font-family: Roboto, Helvetica, Arial, sans-serif;
  font-size: 13px;
}

window#sfwbar {
  -GtkWidget-direction: top;
  background-color: rgba(43, 48, 59, 0.5);
  border-bottom: 3px solid rgba(100, 114, 125, 0.5);
  color: #ffffff;
  transition-property: background-color;
  transition-duration: .5s;
}

eventbox { background-image: none; background-color: transparent; }

button#pager_normal *, button#pager_visible *, button#pager_focused * {
  padding: 0px;
  color: #ffffff;
}

button#pager_normal, button#pager_visible, button#pager_focused {
  padding: 0 5px;
  background-color: transparent;
  background-image: none;
  color: #ffffff;
  /* Use box-shadow instead of border so the text isn't offset */
  box-shadow: inset 0 -3px transparent;
  /* Avoid rounded borders under each workspace name */
  border: none;
  border-radius: 0;
  min-height: 30px;
}

button#pager_focused {
  background-color: #64727D;
  box-shadow: inset 0 -3px #ffffff;
}

#mode {
  background-color: #64727D;
  border-bottom: 3px solid #ffffff;
}

#clock,
#battery,
#cpu,
#memory,
#disk,
#temperature,
#backlight,
#network,
#pulseaudio,
#pulseaudio_muted,
#custom-media,
#tray,
#mode,
#idle_inhibitor,
#idle_inhibitor_activated,
#bluetooth,
#mpd {
  padding: 0 10px;
  color: #ffffff;
  margin-right: 4px;
}

#window,
#workspaces {
  margin: 0 4px;
}

#clock {
  background-color: #64727D;
}

#bluetooth {
  background-color: #84225D;
}

#battery {
  background-color: #ffffff;
  color: #000000;
}

#battery_charging, #battery_plugged {
  color: #ffffff;
  background-color: #26A65B;
}

@keyframes blink {
  to {
      background-color: #ffffff;
      color: #000000;
  }
}

#battery.critical:not(.charging) {
  background-color: #f53c3c;
  color: #ffffff;
  animation-name: blink;
  animation-duration: 0.5s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

label {
  color: #000000;
}

label:focus {
  background-color: #000000;
}

#cpu {
  background-color: #2ecc71;
  color: #000000;
}

#memory {
  background-color: #9b59b6;
}

#disk {
  background-color: #964B00;
}

#backlight {
  background-color: #90b1b1;
}

#network {
  background-color: #2980b9;
}

#network_disconnected {
  background-color: #f53c3c;
}

#pulseaudio {
  background-color: #f1c40f;
  color: #000000;
}

#pulseaudio_muted {
  background-color: #90b1b1;
  color: #2a5c45;
}

#custom-media {
  background-color: #66cc99;
  color: #2a5c45;
  min-width: 100px;
}

#custom-media.custom-spotify {
  background-color: #66cc99;
}

#custom-media.custom-vlc {
  background-color: #ffa000;
}

#temperature {
  background-color: #f0932b;
}

#temperature.critical {
  background-color: #eb4d4b;
}

image#tray_active, image#tray_passive, image#tray_attention {
  background-color: #2980b9;
  padding: 7px 5px;
}

image#tray_passive {
  -gtk-icon-effect: dim;
}

image#tray_attention {
  -gtk-icon-effect: highlight;
  background-color: #eb4d4b;
}

#idle_inhibitor {
  background-color: #2d3436;
}

#idle_inhibitor_activated {
  background-color: #ecf0f1;
  color: #2d3436;
}

#mpd_play,
#mpd_paused,
#mpd_stopped,
#mpd_disconnected,
#mpd {
  background-color: #66cc99;
  color: #2a5c45;
  padding: 0 10px;
  margin-right: 4px;
}

#mpd_disconnected {
  -GtkWidget-visible: false;
  background-color: #f53c3c;
}

#mpd_stopped {
  background-color: #90b1b1;
}

#mpd_paused {
  background-color: #51a37a;
}

#language {
  background: #00b093;
  color: #740864;
  padding: 0 5px;
  margin: 0 5px;
  min-width: 16px;
}

#keyboard-state {
  background: #97e1ad;
  color: #000000;
  padding: 0 0px;
  margin: 0 5px;
  min-width: 16px;
}

#keyboard-state > label {
  padding: 0 5px;
}

#keyboard-state > label.locked {
  background: rgba(0, 0, 0, 0.2);
}

#clock {
  background-color: #64727D;
}

#hidden {
  -GtkWidget-visible: false;
}

button#pager_preview {
  background-image: none;
  border-radius: 0;
  border-image: none;
  border-color: #000000;
  border-width: 0.25mm;
  color: #777777;
  min-width: 5cm;
  min-height: 2.8125cm;
}

grid#switcher_active *, grid#switcher_active, grid#switcher_active * * {
  min-width: 1.25cm;
  min-height: 1.25cm;
  border-image: none;
  padding: 1.25mm;
  background-color: #2980b9;
  border-radius: 1.25mm;
}

grid#switcher_normal *, grid#switcher_normal, grid#switcher_normal * * {
  min-width: 1.25cm;
  min-height: 1.25cm;
  border-image: none;
  padding: 1.25mm;
}

window#switcher { 
  border-style: solid;
  border-width: 0.25mm;
  border-color: #000000;
  border-radius: 1.25mm; 
  padding: 1.25mm; 
  -GtkWidget-hexpand: true;
  background-color: rgba(43, 48, 59, 0.5);
  border: 3px solid rgba(100, 114, 125, 0.5);
  color: #ffffff;
  transition-property: background-color;
  transition-duration: .5s;
}

grid#switcher { 
  border-radius: 1.25mm;
  padding: 1.25mm;
}
